package com.example.jigsaw.view;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.view.View;

import com.example.jigsaw.R;

public class GameView extends View {
	/**
	 * 屏幕密度
	 */
	private Bitmap background;
	/**
	 * 拼图图像
	 */
	private Bitmap puzzImage;
	/**
	 * 拼图区域
	 */
	private Rect puzzRect;
	/**
	 * 平图缩略区域
	 */
	private Rect thumRect;
	/**
	 * 每个拼图快被打乱的范围
	 */
	private Rect cellRect;
	/**
	 * 平图快的宽度
	 */
	private double pw;
	/**
	 * 拼图块的高度
	 */
	private double ph;
	/**
	 * 画笔
	 */
	private Paint paint;
	/**
	 * 存储所有拼图块的动态数组
	 */
	public List<PuzzleCell> puzzCells = new ArrayList<PuzzleCell>();
	/**
	 * 游戏进度中保存的拼图块状态对象动态数组
	 */
	public List<PuzzCellState> cellStates = new ArrayList<PuzzCellState>();

	/**
	 * 屏幕密度
	 */
	private float density;

	public GameView(Context context) {
		super(context);
		this.paint = new Paint();
		this.paint.setColor(Color.RED);
		this.paint.setAntiAlias(true);
		this.paint.setStyle(Paint.Style.STROKE);
		this.density = getContext().getResources().getDisplayMetrics().density;

	}

	@Override
	protected void onSizeChanged(int w, int h, int oldw, int oldh) {

		/*
		 * 计算屏幕的大小，使高宽符合横屏的要求
		 */
		int screenW = (w > h) ? w : h;
		int screenH = (w > h) ? h : w;

		pw = (screenW - dip2px(10) - dip2px(10) - dip2px(10)) / 5.5;
		ph = (screenH - dip2px(20) - dip2px(20)) / 3.0;

		puzzRect = new Rect(dip2px(10), dip2px(20),
				dip2px(10) + (int) (4 * pw), (int) (3 * ph));

		this.thumRect = new Rect(dip2px(10) + (int) (4 * pw) + dip2px(10),
				dip2px(20), screenW - dip2px(10), (int) (dip2px(20) + ph));

		this.cellRect = new Rect(dip2px(10) + (int) (4 * pw) + dip2px(10),
				(int) (dip2px(20) + ph + dip2px(5)), (int) (screenW
						- dip2px(10) - pw), (int) (screenH - dip2px(20) - ph));
		/*
		 * 加载背景图片，按屏幕大小缩放成一张
		 */
		Bitmap bg = BitmapFactory.decodeResource(getResources(),
				R.drawable.wallpaper);

		background = Bitmap.createScaledBitmap(bg, screenW, screenH, false);
		bg.recycle();

		Bitmap pic = BitmapFactory.decodeResource(getResources(),
				R.drawable.pic02);

		bg.recycle();

		puzzImage = Bitmap.createScaledBitmap(pic, puzzRect.width(),
				puzzRect.height(), false);
		pic.recycle();

		super.onSizeChanged(screenW, screenH, oldw, oldh);
	}

	@Override
	protected void onDraw(Canvas canvas) {

		canvas.drawBitmap(background, 0, 0, null);

		int alpha = paint.getAlpha();
		paint.setAlpha(120);

		canvas.drawBitmap(puzzImage, null, puzzRect, paint);
		/*
		 * 平图区边框
		 */
		canvas.drawRect(cellRect, paint);
		paint.setAlpha(alpha);

		/*
		 * 绘制水平格子线
		 */
		canvas.drawLine(puzzRect.left, (int) ph + puzzRect.top, puzzRect.right,
				(int) ph + puzzRect.top, paint);
		canvas.drawLine(puzzRect.left, (int) (ph * 2) + puzzRect.top,
				puzzRect.right, (int) (ph * 2) + puzzRect.top, paint);

		/*
		 * 绘制垂直格子线
		 */
		canvas.drawLine((int) (pw * 1) + puzzRect.left, puzzRect.top,
				(int) (pw * 1) + puzzRect.left, puzzRect.bottom, paint);
		canvas.drawLine((int) (pw * 2) + puzzRect.left, puzzRect.top,
				(int) (pw * 2) + puzzRect.left, puzzRect.bottom, paint);
		canvas.drawLine((int) (pw * 3) + puzzRect.left, puzzRect.top,
				(int) (pw * 3) + puzzRect.left, puzzRect.bottom, paint);

		/*
		 * 绘制缩略图
		 */
		canvas.drawBitmap(puzzImage, null, thumRect, paint);
	}

	/**
	 * 将拼图按3x4的大小切割成12个拼图块
	 */
	private void makePuzzCells() {
		// 将拼图按3x4大小切割，并将拼图块保存到puzzCells动态数组中
		Set<Integer> zOrders = new HashSet<Integer>();
		Rect puzzR, destR;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++) {
				// 计算第(i,j)位置的格子在原拼图中对应的矩形区域
				puzzR = new Rect((int) (j * pw), (int) (i * ph),
						(int) ((j + 1) * pw), (int) ((i + 1) * ph));
				// 计算拼图块图在打乱区域显示的位置，左上角在cellsRect区域内
				destR = new Rect();
				destR.left = cellsRect.left
						+ (int) (Math.random() * cellsRect.width());
				destR.top = cellsRect.top
						+ (int) (Math.random() * cellsRect.height());
				destR.right = destR.left + (int) pw;
				destR.bottom = destR.top + (int) ph;

				// 随机产生一个不重复的拼图块堆叠显示次序
				int zOrder;
				do {
					zOrder = (int) (12 * Math.random());
				} while (zOrders.contains(zOrder));

				// 保存zOrder，以使拼图块的zOrder不重复
				zOrders.add(zOrder);

				// 创建PuzzleCell对象，保存拼图块图像、显示区域、堆叠次序
				PuzzleCell cell = new PuzzleCell();
				cell.image = Bitmap.createBitmap(puzzImage, puzzR.left,
						puzzR.top, puzzR.width(), puzzR.height());
				// 记录拼图块图像编号
				cell.imgId = i * 4 + j;
				//
				cell.rect = destR;
				cell.zOrder = zOrder;
				// 确定拼图块的归位区域
				puzzR.offset(dip2px(10), dip2px(20));
				cell.homeRect = puzzR;
				cell.fixed = false;

				puzzCells.add(cell);
			}
		}
		// 根据拼图块的zOrder倒排序，zOrder大的拼图块排在前面
		sortPuzzCells();
	}

	/**
	 * 从保存的游戏进度中加载拼图块
	 */
	private void loadPuzzCells() {
		int row, col;
		Rect puzzR;
		for (PuzzCellState one : cellStates) {
			// 根据图像编号计算原拼图分割中的行列位置
			row = one.imgId / 4;
			col = one.imgId % 4;
			// 计算第(row,col)位置的格子在原拼图中对应的矩形区域
			puzzR = new Rect((int) (col * pw), (int) (row * ph),
					(int) ((col + 1) * pw), (int) ((row + 1) * ph));
			// 创建PuzzleCell对象，保存拼图块图像、显示区域、堆叠次序
			PuzzleCell cell = new PuzzleCell();
			cell.image = Bitmap.createBitmap(puzzImage, puzzR.left, puzzR.top,
					puzzR.width(), puzzR.height());
			cell.imgId = one.imgId;
			cell.rect = new Rect(one.posx, one.posy, one.posx + (int) pw,
					one.posy + (int) ph);
			cell.zOrder = one.zOrder;
			cell.fixed = one.fixed;
			// 确定拼图块的归位区域
			puzzR.offset(dip2px(10), dip2px(20));
			cell.homeRect = puzzR;
			puzzCells.add(cell);
		}
		// 根据拼图块的zOrder倒排序，zOrder大的拼图块排在前面
		sortPuzzCells();
	}

	/**
	 * 获取所有拼图块中zOrder最大的那个值
	 */
	private int getCellMaxzOrder() {
		int zOrder = -1;
		for (PuzzleCell cell : puzzCells) {
			if (cell.zOrder > zOrder)
				zOrder = cell.zOrder;
		}
		return zOrder;
	}

	/**
	 * 根据拼图块的zOrder进行倒序排序
	 */
	private void sortPuzzCells() {
		Collections.sort(puzzCells, new Comparator<PuzzleCell>() {
			@Override
			public int compare(PuzzleCell c0, PuzzleCell c1) {
				return c1.zOrder - c0.zOrder;
			}
		});
	}

	private int dip2px(float dip) {

		int px = (int) (dip * density + 0.5);
		return px;

	}

}
